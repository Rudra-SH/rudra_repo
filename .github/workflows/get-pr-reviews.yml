name: Get PR Reviews

on:
  workflow_dispatch:

jobs:
  fetch-pr-reviews:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install Octokit
        run: npm install @octokit/core

      - name: Fetch PRs and their reviews
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: 'backstage'
          REPO: 'backstage'
        uses: actions/github-script@v7
        with:
          script: |
            const { Octokit } = require("@octokit/core");

            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
            const owner = process.env.OWNER;
            const repo = process.env.REPO;
            const limit = 5;
  
            async function fetchPullRequests() {
              const { data } = await octokit.request('GET /repos/{owner}/{repo}/pulls', {
                owner,
                repo,
                per_page: 100
              });
              return data;
            }
  
            async function fetchReviews(prNumber) {
              const { data } = await octokit.request('GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews', {
                owner,
                repo,
                pull_number: prNumber
              });
              return data;
            }
  
            async function runWithConcurrencyLimit(tasks, limit) {
              const results = [];
              const executing = [];
  
              for (const task of tasks) {
                const p = task();
                results.push(p);
  
                const e = p.then(() => executing.splice(executing.indexOf(e), 1));
                executing.push(e);
  
                if (executing.length >= limit) {
                  await Promise.race(executing);
                }
              }
  
              return Promise.all(results);
            }
  
            (async () => {
              const pullRequests = await fetchPullRequests();
  
              if (pullRequests.length === 0) {
                console.log("No open pull requests found.");
                return;
              }

              console.log(pullRequests.length);
  
              const tasks = pullRequests.map(pr => () => fetchReviews(pr.number));
              const reviewsPerPR = await runWithConcurrencyLimit(tasks, limit);
  
              pullRequests.forEach((pr, i) => {
                console.log(`\nPR #${pr.number} - ${pr.title}`);
                const reviews = reviewsPerPR[i];
                if (reviews.length === 0) {
                  console.log("  No reviews");
                } else {
                  reviews.forEach(review => {
                    console.log(`  ${review.user.login}: ${review.state}`);
                  });
                }
              });
            })().catch(err => {
              console.error("Error:", err);
              process.exit(1);
            });
